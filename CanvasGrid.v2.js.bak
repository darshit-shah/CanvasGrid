var CanvasGrid = Object.create(HTMLElement.prototype);

CanvasGrid.createdCallback = function() {
	this.state=CanvasGrid.getInitialState();
	this.mainContainer = document.createElement('div');
	if(this.getAttribute('width') != null)
		this.state.containerProperties.proposedWidth=this.getAttribute('width');
	if(this.getAttribute('height') != null)
		this.state.containerProperties.proposedHeight=this.getAttribute('height');
	this.mainContainer.style.background='yellow';

	this.grid = document.createElement('canvas');
	this.grid.style.background='#F9F9F9';
	this.mainContainer.appendChild(this.grid);

	this.appendChild(this.mainContainer);
	CanvasGrid.render(this);
};

CanvasGrid.attributeChangedCallback = function(attrName, oldVal, newVal) {
	if(attrName === 'height'){
		this.state.containerProperties.proposedHeight=newVal;
	}
	else if(attrName === 'width'){
		this.state.containerProperties.proposedWidth=newVal;
	}
	else if(attrName === 'rows'){
		this.state.gridProperties.rows=newVal;
	}
	else if(attrName === 'cols'){
		this.state.gridProperties.cols=newVal;
	}
	console.log(attrName, oldVal, newVal, this.state);
	CanvasGrid.render(this);
}

CanvasGrid.render = function(_this){
	if(_this.state.containerProperties.proposedHeight !== _this.state.containerProperties.height){
		_this.mainContainer.style.height = _this.state.containerProperties.proposedHeight;
		_this.state.containerProperties.height = _this.mainContainer.offsetHeight;
		_this.state.containerProperties.proposedHeight = _this.state.containerProperties.height;
		
		_this.state.gridProperties.height = _this.state.containerProperties.height - 30;
		_this.grid.height = _this.state.gridProperties.height;
	}
	if(_this.state.containerProperties.proposedWidth !== _this.state.containerProperties.width){
		_this.mainContainer.style.width = _this.state.containerProperties.proposedWidth;
		_this.state.containerProperties.width = _this.mainContainer.offsetWidth;
		_this.state.containerProperties.proposedWidth = _this.state.containerProperties.width;
		
		_this.state.gridProperties.width = _this.state.containerProperties.width - 30;
		_this.grid.width = _this.state.gridProperties.width;
	}
	
	var totalWidth = _this.state.gridProperties.cols * _this.state.cellProperties.width;
	var totalHeight = _this.state.gridProperties.rows * _this.state.cellProperties.height;
	
	var gridWidth = _this.state.containerProperties.width - 30;
	if(gridWidth > totalWidth)
		gridWidth = totalWidth;
		
	var gridHeight = _this.state.containerProperties.width - 30;
	if(gridHeight > totalHeight)
		gridHeight = totalHeight;
	
	if(_this.state.gridProperties.width !== gridWidth){
		_this.state.gridProperties.width = gridWidth;
	}
	
	if(_this.state.gridProperties.height !== gridHeight){
		_this.state.gridProperties.height = gridHeight;
	}
};

CanvasGrid.renderGrid = function(_this){
};


CanvasGrid.getInitialState=function(){
	var defaultBackground={
		color:'#F9F9F9',
		img:null
	};

	var defaultBorderSingle={
		width:'1',
		style:'solid',
		color:'steelblue'
	};

	var defaultBorder={
		left: utilLibrary.extend(true, {}, defaultBorderSingle),
		right: utilLibrary.extend(true, {}, defaultBorderSingle),
		top: utilLibrary.extend(true, {}, defaultBorderSingle),
		bottom: utilLibrary.extend(true, {}, defaultBorderSingle)
	}

	var containerProperties={
		proposedHeight:500,
		proposedWidth:500,
		height:0,
		width:0,
		background: utilLibrary.extend(true, {}, defaultBackground),
		border: utilLibrary.extend(true, {}, defaultBorder)
	}

	var gridProperties={
		height:0,
		width:0,
		rows:1,
		cols:1,
		background: utilLibrary.extend(true, {}, defaultBackground),
		border: utilLibrary.extend(true, {}, defaultBorder)
	}

	var cellProperties={
		height:30,
		width:100,
		background: utilLibrary.extend(true, {}, defaultBackground),
		border: utilLibrary.extend(true, {}, defaultBorder)
	}

	var defaultState = {
		containerProperties: containerProperties,
		gridProperties: gridProperties,
		cellProperties: cellProperties
	}
	return utilLibrary.extend(true, {}, defaultState);
}

document.registerElement('canvas-grid',{
	prototype:CanvasGrid
});

var utilLibrary={
	extend: function(){
		var options, name, src, copy, copyIsArray, clone, target = arguments[0] || {},
		i = 1,
		length = arguments.length,
		deep = false,
		toString = Object.prototype.toString,
		hasOwn = Object.prototype.hasOwnProperty,
		push = Array.prototype.push,
		slice = Array.prototype.slice,
		trim = String.prototype.trim,
		indexOf = Array.prototype.indexOf,
		class2type = {
			"[object Boolean]": "boolean",
			"[object Number]": "number",
			"[object String]": "string",
			"[object Function]": "function",
			"[object Array]": "array",
			"[object Date]": "date",
			"[object RegExp]": "regexp",
			"[object Object]": "object"
		},
		jQ = {
			isFunction: function(obj) {
				return jQ.type(obj) === "function"
			},
			isArray: Array.isArray ||
			function(obj) {
				return jQ.type(obj) === "array"
			},
			isWindow: function(obj) {
				return obj != null && obj == obj.window
			},
			isNumeric: function(obj) {
				return !isNaN(parseFloat(obj)) && isFinite(obj)
			},
			type: function(obj) {
				return obj == null ? String(obj) : class2type[toString.call(obj)] || "object"
			},
			isPlainObject: function(obj) {
				if (!obj || jQ.type(obj) !== "object" || obj.nodeType) {
					return false
				}
				try {
					if (obj.constructor && !hasOwn.call(obj, "constructor") && !hasOwn.call(obj.constructor.prototype, "isPrototypeOf")) {
						return false
					}
				} catch (e) {
					return false
				}
				var key;
				for (key in obj) {}
				return key === undefined || hasOwn.call(obj, key)
			}
		};
		if (typeof target === "boolean") {
			deep = target;
			target = arguments[1] || {};
			i = 2;
		}
		if (typeof target !== "object" && !jQ.isFunction(target)) {
			target = {}
		}
		if (length === i) {
			target = this;
			--i;
		}
		for (i; i < length; i++) {
			if ((options = arguments[i]) != null) {
				for (name in options) {
					src = target[name];
					copy = options[name];
					if (target === copy) {
						continue
					}
					if (deep && copy && (jQ.isPlainObject(copy) || (copyIsArray = jQ.isArray(copy)))) {
						if (copyIsArray) {
							copyIsArray = false;
							clone = src && jQ.isArray(src) ? src : []
						} else {
							clone = src && jQ.isPlainObject(src) ? src : {};
						}
						// WARNING: RECURSION
						target[name] = utilLibrary.extend(deep, clone, copy);
					} else if (copy !== undefined) {
						target[name] = copy;
					}
				}
			}
		}
		return target;
	}
}